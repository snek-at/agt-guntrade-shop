{"version":3,"file":"component---src-pages-wishlist-tsx-5e381622f123f2bcc2ac.js","mappings":"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","sources":["webpack://agt-guntrade-shop/./src/components/organisms/ContactModal/index.tsx","webpack://agt-guntrade-shop/./src/pages/wishlist.tsx","webpack://agt-guntrade-shop/./src/services/mail.ts","webpack://agt-guntrade-shop/./src/services/wishlist/index.ts","webpack://agt-guntrade-shop/./node_modules/@babel/runtime/helpers/esm/objectDestructuringEmpty.js"],"sourcesContent":["import {Button, IconButton} from '@chakra-ui/button'\nimport {Image} from '@chakra-ui/image'\nimport {Input} from '@chakra-ui/input'\nimport {Text, Box, Heading, Flex} from '@chakra-ui/layout'\nimport {\n  Modal,\n  ModalContent,\n  ModalOverlay,\n  ModalHeader,\n  ModalCloseButton,\n  ModalBody\n} from '@chakra-ui/modal'\nimport {useToast} from '@chakra-ui/toast'\nimport {ScaleFade} from '@chakra-ui/transition'\nimport {IoIosCopy} from '@react-icons/all-files/io/IoIosCopy'\nimport {IoMdShareAlt} from '@react-icons/all-files/io/IoMdShareAlt'\nimport React from 'react'\nimport {FormControl, FormErrorMessage, FormLabel} from '@chakra-ui/form-control'\nimport {Checkbox} from '@chakra-ui/checkbox'\nimport {Select} from '@chakra-ui/select'\nimport {Textarea} from '@chakra-ui/textarea'\n\nimport * as style from './style'\nimport {useForm} from 'react-hook-form'\nimport {sendEmail} from '../../../services/mail'\n\nexport interface ContactModalProps {\n  isOpen: boolean\n  heading: React.ReactNode\n  text: React.ReactNode\n  onClose: Function\n  wishlist: {\n    title: string\n    quantity: number\n  }[]\n}\n\nexport const ContactModal = ({\n  isOpen,\n  heading,\n  text,\n  wishlist,\n  onClose\n}: ContactModalProps) => {\n  const toast = useToast()\n  const generateEmailContent = () => {\n    const wishlistText = wishlist\n      .map(item => {\n        return `- ${item.quantity} x ${item.title}`\n      })\n      .join('\\n')\n\n    const content = `Sehr geehrtes AGT Team,\nich würde gerne ein Kaufangebot für folgende Artikel einholen:\n\n${wishlistText}\n\n\nMit freundlichen Grüßen!\n    `\n\n    return content\n  }\n\n  const defaultValues = {\n    firstName: '',\n    lastName: '',\n    email: '',\n    message: generateEmailContent(),\n    agbChecked: false\n  }\n\n  const {\n    handleSubmit,\n    reset,\n    register,\n    formState: {errors, isSubmitting}\n  } = useForm<typeof defaultValues>({\n    defaultValues\n  })\n\n  React.useEffect(() => {\n    reset(defaultValues)\n  }, [wishlist])\n\n  const onSubmit = async (data: typeof defaultValues) => {\n    const {firstName, lastName, email, message} = data\n\n    const subject = `Kaufanfrage für ${wishlist\n      .map(item => item.title)\n      .join(', ')}`\n\n    const body = `\nAnfrage von ${firstName} ${lastName} (${email}) über AGT Shop.\n\n<== Inhalt der Anfrage ==>\n\n${message}\n`\n\n    await sendEmail({\n      fromEmail: email,\n      name: `${firstName} ${lastName}`,\n      subject,\n      message: body\n    })\n\n    toast({\n      title: 'Anfrage erfolgreich versendet',\n      description:\n        'Vielen Dank für Ihre Anfrage. Wir werden uns so schnell wie möglich bei Ihnen melden.',\n      status: 'success',\n      duration: 9000,\n      isClosable: true\n    })\n\n    onClose()\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={() => {\n        onClose()\n      }}\n      isCentered\n      scrollBehavior=\"inside\">\n      <ModalOverlay />\n      <ModalContent\n        bg=\"gray.50\"\n        borderRadius=\"5px\"\n        minH=\"60vh\"\n        maxW={{base: '90vw', md: '64vw', xl: '60vw'}}>\n        <ModalHeader ml=\"5\" fontWeight={'bold'}>\n          {heading}\n        </ModalHeader>\n        <ModalCloseButton />\n        <ModalBody mx=\"5\" mb=\"5\">\n          <Text mb=\"3\">{text}</Text>\n          <form onSubmit={handleSubmit(onSubmit)}>\n            <Flex mb=\"3\" direction={{base: 'column', md: 'row'}}>\n              <Box mr=\"5\" w={{base: '100%', md: '50%'}}>\n                <FormControl isInvalid={!!errors.firstName}>\n                  <FormLabel htmlFor=\"first-name\">Vorname</FormLabel>\n                  <Input\n                    bg=\"white\"\n                    placeholder=\"Max\"\n                    {...register('firstName', {required: true})}\n                    borderColor=\"#D4D4D9\"\n                  />\n                </FormControl>\n              </Box>\n              <Box w={{base: '100%', md: '50%'}}>\n                <FormControl isInvalid={!!errors.lastName}>\n                  <FormLabel htmlFor=\"last-name\">Nachname</FormLabel>\n                  <Input\n                    bg=\"white\"\n                    placeholder=\"Mustermann\"\n                    {...register('lastName', {required: true})}\n                    borderColor=\"#D4D4D9\"\n                  />\n                </FormControl>\n              </Box>\n            </Flex>\n\n            <Box mb=\"3\">\n              <FormControl isInvalid={!!errors.email}>\n                <FormLabel htmlFor=\"email\">Email Adresse</FormLabel>\n                <Input\n                  bg=\"white\"\n                  placeholder=\"max.mustermann@example.at\"\n                  {...register('email', {\n                    required: true,\n                    pattern: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i\n                  })}\n                  borderColor=\"#D4D4D9\"\n                />\n              </FormControl>\n            </Box>\n            <Box mb=\"5\">\n              <FormControl isInvalid={!!errors.message}>\n                <FormLabel htmlFor=\"message\">Nachricht</FormLabel>\n                <Textarea\n                  bg=\"white\"\n                  resize=\"vertical\"\n                  borderColor=\"#D4D4D9\"\n                  h=\"30vh\"\n                  {...register('message', {required: true})}\n                />\n              </FormControl>\n            </Box>\n            <Box>\n              <FormControl isInvalid={!!errors.agbChecked}>\n                <Flex>\n                  <Checkbox\n                    {...register('agbChecked', {required: true})}\n                    borderColor=\"#D4D4D9\"\n                    bg=\"white\"\n                    h=\"fit-content\"\n                    mt=\"0.5\"\n                    mr=\"2\"\n                  />\n                  <Text mt={'-2px'}>\n                    Ich habe die AGBs gelesen und stimme der Verarbeitung meiner\n                    Daten zu.\n                  </Text>\n                </Flex>\n                {errors.agbChecked && (\n                  <FormErrorMessage>\n                    Bitte akzeptieren Sie die AGBs\n                  </FormErrorMessage>\n                )}\n              </FormControl>\n              <Button\n                mt=\"4\"\n                colorScheme=\"agt.grayScheme\"\n                type=\"submit\"\n                isLoading={isSubmitting}>\n                Absenden\n              </Button>\n            </Box>\n          </form>\n        </ModalBody>\n      </ModalContent>\n    </Modal>\n  )\n}\n\nexport default ContactModal\n","import React from 'react'\nimport {useDisclosure} from '@chakra-ui/hooks'\nimport {graphql, navigate, PageProps} from 'gatsby'\nimport {useWishlist} from '../services/wishlist'\nimport {WishListLayout} from '../layout/WishListLayout'\nimport ContactModal from '../components/organisms/ContactModal'\nimport {connectPage} from '@jaenjs/jaen'\n\nconst WishlistPage = ({}: PageProps) => {\n  const {wishlist, updateQuantity, removeFromWishlist} = useWishlist()\n  const {isOpen, onOpen, onClose} = useDisclosure()\n\n  const handleRequestNow = () => {\n    onOpen()\n  }\n\n  return (\n    <>\n      <WishListLayout\n        items={wishlist}\n        onRemove={removeFromWishlist}\n        onQuantityChange={updateQuantity}\n        onRequestNow={handleRequestNow}\n        activePath=\"\"\n      />\n      <ContactModal\n        wishlist={wishlist}\n        isOpen={isOpen}\n        heading={<p>Kaufanfrage (unverbindlich)</p>}\n        text={''}\n        onClose={() => onClose()}\n      />\n    </>\n  )\n}\n\nexport default connectPage(WishlistPage, {\n  displayName: 'WishlistPage'\n})\n\nexport const query = graphql`\n  query ($jaenPageId: String!) {\n    ...JaenPageQuery\n  }\n`\n","export const sendEmail = async (args: {\n  fromEmail: string\n  name: string\n  subject: string\n  message: string\n}) => {\n  const {fromEmail, name, subject, message} = args\n\n  return await fetch('https://api.snek.at/mail/send', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      to_email: 'nicoschett@icloud.com',\n      reply_to_email: fromEmail,\n      subject: `${name} - ${subject}`,\n      content: message\n    })\n  })\n}\n","import {IGatsbyImageData} from 'gatsby-plugin-image'\nimport React from 'react'\n\nexport interface WishlistProduct {\n  id: string\n  handle: string\n  title: string\n  price: string\n  reducedPrice: string\n  categoriesString: string\n  image: {\n    alt: string\n    gatsbyImageData: IGatsbyImageData\n  }\n  quantity: number\n}\n\nexport class WishlistService {\n  static key = 'wishlist'\n\n  constructor() {}\n\n  static setWishlist(list: WishlistProduct[]) {\n    if (typeof window === 'undefined') return\n\n    localStorage.setItem(WishlistService.key, JSON.stringify(list))\n  }\n\n  static getWishlist(): WishlistProduct[] {\n    if (typeof window === 'undefined') return []\n\n    return JSON.parse(window.localStorage.getItem(WishlistService.key) || '[]')\n  }\n\n  static addToWishlist(product: WishlistProduct) {\n    const wishList = WishlistService.getWishlist()\n    wishList.push(product)\n\n    WishlistService.setWishlist(wishList)\n  }\n\n  static updateQuantity(productId: string, quantity: number) {\n    const wishList = WishlistService.getWishlist()\n    const product = wishList.find(p => p.id === productId)\n\n    if (product) {\n      product.quantity = quantity\n    }\n\n    WishlistService.setWishlist(wishList)\n  }\n\n  static removeFromWishlist(productId: string) {\n    const wishList = WishlistService.getWishlist()\n    const index = wishList.findIndex(p => p.id === productId)\n\n    if (index === -1) return\n\n    wishList.splice(index, 1)\n\n    WishlistService.setWishlist(wishList)\n  }\n}\n\nexport function useWishlist() {\n  const [wishlist, setWishlist] = React.useState(WishlistService.getWishlist())\n\n  React.useEffect(() => {\n    const wishlist = WishlistService.getWishlist()\n    setWishlist(wishlist)\n  }, [])\n\n  return {\n    wishlist,\n    addToWishlist: (product: WishlistProduct) => {\n      WishlistService.addToWishlist(product)\n      setWishlist(WishlistService.getWishlist())\n    },\n    updateQuantity: (productId: string, quantity: number) => {\n      WishlistService.updateQuantity(productId, quantity)\n      setWishlist(WishlistService.getWishlist())\n    },\n    removeFromWishlist: (productId: string) => {\n      WishlistService.removeFromWishlist(productId)\n      setWishlist(WishlistService.getWishlist())\n    }\n  }\n}\n","export default function _objectDestructuringEmpty(obj) {\n  if (obj == null) throw new TypeError(\"Cannot destructure undefined\");\n}"],"names":["isOpen","heading","text","wishlist","onClose","toast","useToast","defaultValues","firstName","lastName","email","message","map","item","quantity","title","join","agbChecked","useForm","handleSubmit","reset","register","formState","errors","isSubmitting","React","onSubmit","data","subject","body","sendEmail","fromEmail","name","description","status","duration","isClosable","isCentered","scrollBehavior","bg","borderRadius","minH","maxW","base","md","xl","ml","fontWeight","mx","mb","Text","Flex","direction","Box","mr","w","isInvalid","htmlFor","placeholder","required","borderColor","pattern","resize","h","mt","colorScheme","type","isLoading","connectPage","useWishlist","updateQuantity","removeFromWishlist","useDisclosure","onOpen","items","onRemove","onQuantityChange","onRequestNow","activePath","displayName","args","fetch","method","headers","JSON","stringify","to_email","reply_to_email","content","WishlistService","setWishlist","list","window","localStorage","setItem","key","getWishlist","parse","getItem","addToWishlist","product","wishList","push","productId","find","p","id","index","findIndex","splice","_objectDestructuringEmpty","obj","TypeError"],"sourceRoot":""}