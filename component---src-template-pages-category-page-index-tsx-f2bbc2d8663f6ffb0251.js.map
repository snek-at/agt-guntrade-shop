{"version":3,"file":"component---src-template-pages-category-page-index-tsx-f2bbc2d8663f6ffb0251.js","mappings":"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","sources":["webpack://agt-guntrade-shop/./node_modules/react-magnetic-di/lib/esm/react/constants.js","webpack://agt-guntrade-shop/./node_modules/react-magnetic-di/lib/esm/react/utils.js","webpack://agt-guntrade-shop/./src/common/utils.tsx","webpack://agt-guntrade-shop/./src/layout/BannerLayout/style.ts","webpack://agt-guntrade-shop/./src/layout/BannerLayout/index.tsx","webpack://agt-guntrade-shop/./src/layout/ProductCardLayout/index.tsx","webpack://agt-guntrade-shop/./src/layout/ProductCardLayout/style.ts","webpack://agt-guntrade-shop/./src/layout/ShopCategoryLayout/style.ts","webpack://agt-guntrade-shop/./src/layout/ShopCategoryLayout/index.tsx","webpack://agt-guntrade-shop/./src/templatePages/CategoryPage/index.tsx"],"sourcesContent":["export var KEY = Symbol.for('di');\nexport var PACKAGE_NAME = 'react-magnetic-di';","import { KEY } from './constants';\nvar hasWarned = false;\nexport function warnOnce(message) {\n  if (!hasWarned) {\n    // eslint-disable-next-line no-console\n    console.error('Warning:', message);\n    hasWarned = true;\n  }\n}\nexport function getDisplayName(Comp, wrapper) {\n  if (wrapper === void 0) {\n    wrapper = '';\n  }\n\n  var name = Comp.displayName || Comp.name;\n  return !name || !wrapper ? name : \"\".concat(wrapper, \"(\").concat(name, \")\");\n}\nexport function injectable(from, implementation) {\n  implementation.displayName = getDisplayName(implementation) || getDisplayName(from, 'di');\n\n  if (implementation[KEY] && implementation[KEY] !== from) {\n    warnOnce(\"You are trying to use replacement \\\"\".concat(implementation.displayName, \"\\\" on multiple injectables. \") + \"That will override only the last dependency, as each replacement is uniquely linked.\");\n  }\n\n  implementation[KEY] = from;\n  return implementation;\n}\n/** @deprecated use injectable instead */\n\nexport var mock = injectable;","import {injectable} from 'react-magnetic-di'\nimport {Image} from '@chakra-ui/image'\nimport React from 'react'\nimport {Box} from '@chakra-ui/react'\nimport {PageProps} from 'gatsby'\n\nconst breakpoints = ['0em', '30em', '48em', '62em', '80em', '96em']\n\nexport const mq = breakpoints.map(bp => `@media (min-width: ${bp})`)\n\nexport const GCImage = injectable(\n  (props: {gimg: JSX.Element}) => props.gimg,\n  (props: {gimg: JSX.Element}) => (\n    <Image\n      className={props.gimg.props.imgClassName}\n      alt={props.gimg.props.alt}\n      src={props.gimg.props.src}\n    />\n  )\n)\n\nconst getWindowWidth = () => {\n  return Math.max(\n    document.documentElement.clientWidth || 0,\n    window.innerWidth || 0\n  )\n}\n\nexport const useWindowWidth = () => {\n  const [windowWidth, setWindowWidth] = React.useState<number>()\n\n  React.useEffect(() => {\n    setWindowWidth(getWindowWidth())\n    const handleResize = () => {\n      setWindowWidth(getWindowWidth())\n    }\n\n    window.addEventListener('resize', handleResize)\n    return () => window.removeEventListener('resize', handleResize)\n  }, [])\n\n  return windowWidth\n}\n/**\n * Create a array of empty boxes to fill the grid\n * if there are less items than the grid size (6-total).\n *\n * @param items\n * @returns\n */\nexport function gridPadBoxes(\n  items: any[],\n  gridSize: number = 6,\n  filler: JSX.Element = <Box />\n) {\n  const toFill = gridSize - (items.length % gridSize || gridSize)\n\n  if (toFill > 0) {\n    return Array(toFill).fill(filler)\n  }\n  return []\n}\n\nexport const usePrevious = <T extends unknown>(value: T): T | undefined => {\n  const ref = React.useRef<T>()\n  React.useEffect(() => {\n    ref.current = value\n  })\n  return ref.current\n}\n","import {Box} from '@chakra-ui/react'\nimport styled from '@emotion/styled'\n\nexport const Banner = styled(Box)`\n  .banner-image {\n    height: 200px;\n    width: 100%;\n    object-fit: cover;\n  }\n`\n","import {\n  Box,\n  Flex,\n  Heading\n} from '@chakra-ui/react'\nimport {GatsbyImage, IGatsbyImageData, StaticImage} from 'gatsby-plugin-image'\nimport {Breadcrumbs, ShopLayout} from '../ShopLayout'\n\nimport {GCImage, gridPadBoxes} from '../../common/utils'\nimport * as style from './style'\n\n\nexport interface BannerLayoutProps {\n  title: string\n  path: string\n}\n\nexport const BannerLayout = (props: BannerLayoutProps) => {\n  return (\n    <Box position={'relative'} color=\"white\">\n      <style.Banner>\n        <GCImage\n          gimg={\n            <StaticImage\n              src=\"https://i.imgur.com/8zG2Ymd.jpeg\"\n              alt=\"bg\"\n              imgClassName=\"banner-image\"\n            />\n          }\n        />\n      </style.Banner>\n      <Flex position={'absolute'} top=\"5\" w='100%' justifyContent={'center'} alignItems={'center'}>\n        <Box w=\"8xl\">\n          <Breadcrumbs path={props.path} />\n          <Heading size=\"2xl\" my=\"8\">\n            {props.title}\n          </Heading>\n        </Box>\n      </Flex>\n    </Box>\n  )\n}","import {\n  Flex,\n  Box,\n  Badge,\n  useColorModeValue,\n  HStack,\n  Text,\n  VStack,\n  Button\n} from '@chakra-ui/react'\nimport {GatsbyImage, IGatsbyImageData} from 'gatsby-plugin-image'\nimport React from 'react'\n\nimport {cardStyle} from './style'\n\nfunction calculateTextColorForBackgroundColor(hexColor: string) {\n  const rgb = hexColor\n    .replace('#', '')\n    .match(/../g)\n    ?.map(x => parseInt(x, 16))!\n  const luma = 0.2126 * rgb[0] + 0.7152 * rgb[1] + 0.0722 * rgb[2]\n  return luma > 140 ? 'black' : 'white'\n}\n\nfunction ImageControls(props: {\n  isActive: boolean\n  controls: Array<{\n    icon: React.ReactElement\n    onClick: () => void\n  }>\n}) {\n  const {isActive} = props\n\n  // hstack with two buttons full width and centered\n\n  // Return a gray box with three icons inside\n  return (\n    <Box\n      hidden={!isActive}\n      d=\"flex\"\n      alignItems=\"center\"\n      justifyContent=\"center\"\n      bg={useColorModeValue('gray.200', 'gray.700')}\n      borderRadius=\"sm\"\n      w=\"100%\"\n      h=\"100%\">\n      <HStack align=\"center\" justify=\"center\" w=\"100%\" spacing={'2'} mx=\"2\">\n        {props.controls.map(control => (\n          <Button\n            w=\"100%\"\n            variant={'ghost'}\n            _focus={{boxShadow: 'none'}}\n            onClick={e => {\n              e.stopPropagation()\n              e.preventDefault()\n              control.onClick()\n            }}>\n            {control.icon}\n          </Button>\n        ))}\n      </HStack>\n    </Box>\n  )\n}\n\nfunction ImageBoxWithTags(props: {\n  image: {\n    alt: string\n    gatsbyImageData: IGatsbyImageData\n  }\n  tags: ProductCardProps['tags']\n}) {\n  // Box with image as background and tags on bottom\n  const {image, tags} = props\n\n  return (\n    <Box\n      className=\"background\"\n      borderRadius=\"md\"\n      boxShadow=\"lg\"\n      bg={useColorModeValue('gray.200', 'gray.600')}\n      overflow=\"hidden\"\n      position=\"relative\">\n      <GatsbyImage\n        onDragStart={e => e.preventDefault()}\n        draggable=\"false\"\n        image={image.gatsbyImageData}\n        alt={image.alt}\n      />\n      <Flex position=\"absolute\" top=\"0\" left=\"0\" right=\"0\" p={2}>\n        {tags.map(tag => (\n          <Badge\n            variant=\"solid\"\n            fontSize=\"sm\"\n            fontWeight=\"semibold\"\n            rounded=\"md\"\n            px={2}\n            mr={2}\n            key={tag.name}\n            color={calculateTextColorForBackgroundColor(tag.color)}\n            bgColor={tag.color}\n            textTransform=\"none\">\n            {tag.name}\n          </Badge>\n        ))}\n      </Flex>\n    </Box>\n  )\n}\n\nfunction Price(props: {price: string; discountPrice?: string}) {\n  const price = `${parseFloat(props.price).toFixed(2)} €`\n  if (props.discountPrice) {\n    const discountPrice = `${parseFloat(props.discountPrice).toFixed(2)} €`\n    // strike through price and put discount price on the right side\n    return (\n      <Flex\n        direction=\"row\"\n        wrap=\"wrap\"\n        justifyContent={{\n          base: 'center',\n          md: 'flex-start'\n        }}>\n        <Text\n          fontSize=\"sm\"\n          fontWeight=\"semibold\"\n          color=\"gray.600\"\n          textDecoration={'line-through'}>\n          {price}\n        </Text>\n        <Text fontSize=\"sm\" fontWeight=\"bold\" color=\"red.500\" ml={2}>\n          {discountPrice}\n        </Text>\n      </Flex>\n    )\n  }\n\n  return (\n    <Box fontSize=\"sm\" fontWeight=\"semibold\" mb={2}>\n      <Text>{price}</Text>\n    </Box>\n  )\n}\n\nexport interface ProductCardProps {\n  id: string\n  image: {\n    alt: string\n    gatsbyImageData: IGatsbyImageData\n  }\n  name: string\n  categoriesString: string\n  price: string\n  discountPrice?: string\n  tags: Array<{name: string; color: string}>\n  createdAt: string\n}\n\nexport function ProductCardLayout(props: ProductCardProps) {\n  const {id, image, name, categoriesString, price, discountPrice, createdAt} =\n    props\n\n  const getDefaultTags = (tags: typeof props.tags = []) => {\n    if (new Date(createdAt).getTime() > Date.now() - 7 * 24 * 60 * 60 * 1000) {\n      tags.push({name: 'Neu', color: '#00ff00'})\n    }\n\n    if (discountPrice) {\n      const percent = (1 - parseFloat(discountPrice) / parseFloat(price)) * -100\n\n      tags.push({name: `${percent.toFixed(0)}%`, color: '#ff0000'})\n    }\n\n    return tags\n  }\n\n  const [tags, _] = React.useState(getDefaultTags())\n\n  return (\n    <VStack\n      css={cardStyle()}\n      boxSize={'full'}\n      cursor=\"pointer\"\n      textAlign={{\n        base: 'center',\n        md: 'left'\n      }}>\n      <ImageBoxWithTags image={image} tags={tags} />\n      <Box w=\"100%\">\n        <Text fontSize=\"sm\" isTruncated>\n          {categoriesString || '-'}\n        </Text>\n        <Text fontWeight=\"semibold\">{name}</Text>\n        <Price price={price} discountPrice={discountPrice} />\n      </Box>\n    </VStack>\n  )\n}\n\nexport function generateProductCard(item: any) {\n  const tagsWithoutCategory = item.tags\n    .filter((tag: any) => !tag.startsWith('Kategorie:'))\n    .map((tag: any) => tag.split(':')[1])\n    .join(', ')\n\n  return (\n    <ProductCardLayout\n      createdAt={item.createdAt}\n      id={item.id}\n      tags={[]}\n      image={item.featuredImage}\n      name={item.title}\n      categoriesString={tagsWithoutCategory}\n      price={item.contextualPricing.maxVariantPricing.price.amount}\n      discountPrice={\n        item.contextualPricing.maxVariantPricing.compareAtPrice?.amount\n      }\n    />\n  )\n}\n","import {css} from '@emotion/react'\n\nexport const cardStyle = () => css`\n  &:hover {\n    .background {\n      box-shadow: var(--chakra-shadows-xl);\n    }\n  }\n`\n","import {Box} from '@chakra-ui/react'\nimport styled from '@emotion/styled'\n\nexport const Banner = styled(Box)`\n  .banner-image {\n    height: 30vh;\n    width: 100%;\n    object-fit: cover;\n  }\n`\n","import {\n  AspectRatio,\n  Box,\n  Heading,\n  HStack,\n  Link,\n  SimpleGrid,\n  Text,\n  VStack\n} from '@chakra-ui/react'\nimport {GatsbyImage, IGatsbyImageData, StaticImage} from 'gatsby-plugin-image'\nimport {Breadcrumbs, ShopLayout} from '../ShopLayout'\n\nimport {GCImage, gridPadBoxes} from '../../common/utils'\nimport * as style from './style'\nimport React from 'react'\nimport {ProductGrid} from '../ProductGridLayout'\nimport {BaseLayout} from '../BaseLayout'\nimport {BannerLayout} from '../BannerLayout'\n\nimport {Link as GatsbyLink} from 'gatsby'\nimport {generateProductCard} from '../ProductCardLayout'\n\nexport type CategoryItem = {\n  title: string\n  handle: string\n  totalProducts: number\n  image: {\n    alt: string\n    gatsbyImageData: IGatsbyImageData\n  } | null\n}\n\nconst Header = (props: {path: string; title: string}) => {\n  // banner image\n  return (\n    <Box position={'relative'} color=\"white\">\n      <style.Banner>\n        <GCImage\n          gimg={\n            <StaticImage\n              src=\"https://i.imgur.com/8zG2Ymd.jpeg\"\n              alt=\"bg\"\n              imgClassName=\"banner-image\"\n            />\n          }\n        />\n      </style.Banner>\n      <Box position={'absolute'} top=\"5\" left=\"5\" mx=\"8\">\n        <Breadcrumbs path={props.path} />\n        <Heading size=\"2xl\" my=\"8\">\n          {props.title}\n        </Heading>\n      </Box>\n    </Box>\n  )\n}\n\nconst CategoryGrid = (props: {\n  items: Array<CategoryItem>\n  getPath: (title: string, handle: string, totalProducts: number) => string\n}) => {\n  // grid that does not stretch if there are less items than the grid size\n\n  const {items} = props\n\n  const emptyBoxes: Array<any> = gridPadBoxes(items)\n  return (\n    <SimpleGrid spacing={'4'} {...props} minChildWidth=\"200px\" py=\"8\">\n      {items.map((item, index) => (\n        <Link\n          as={GatsbyLink}\n          to={props.getPath(item.title, item.handle, item.totalProducts)}\n          key={index}\n          borderRadius=\"lg\"\n          overflow=\"hidden\"\n          position=\"relative\"\n          p=\"4\"\n          mb=\"4\"\n          cursor=\"pointer\"\n          _hover={{\n            transform: 'scale(1.05)',\n            color: 'agt.blue'\n          }}>\n          <AspectRatio ratio={1}>\n            <VStack>\n              <GatsbyImage\n                alt={item.image?.alt || item.title}\n                image={item.image?.gatsbyImageData!}\n                style={{\n                  minHeight: '100%',\n                  minWidth: '100%',\n                  objectFit: 'cover',\n                  objectPosition: 'center'\n                }}\n              />\n            </VStack>\n          </AspectRatio>\n          <Text\n            textAlign={\n              'center'\n            }>{`${item.title} (${item.totalProducts})`}</Text>\n        </Link>\n      ))}\n      {emptyBoxes}\n    </SimpleGrid>\n  )\n}\n\nexport const ShopCategoryLayout = (props: {\n  title: string\n  path: string\n  category: React.ComponentProps<typeof CategoryGrid>\n  productGrid: React.ComponentProps<typeof ProductGrid>\n}) => {\n  return (\n    <BaseLayout withSearch={true} activePath={props.path}>\n      {/* <Header path={props.path} title={props.title} /> */}\n      <BannerLayout title={props.title} path={props.path} />\n      <ShopLayout>\n        <VStack spacing={16} align=\"left\">\n          <CategoryGrid {...props.category} />\n          <VStack spacing={8}>\n            <Heading textAlign={'center'} size=\"2xl\" borderBottom={'1px solid'}>\n              {props.productGrid.title}\n            </Heading>\n            <SimpleGrid columns={{base: 2, md: 5}} spacing={'4'}>\n              {props.productGrid.items.map((item, key) => {\n                return (\n                  <Link\n                    key={item.id}\n                    as={GatsbyLink}\n                    to={props.productGrid.getPath(item.handle)}>\n                    {generateProductCard(item)}\n                  </Link>\n                )\n              })}\n            </SimpleGrid>\n          </VStack>\n        </VStack>\n      </ShopLayout>\n    </BaseLayout>\n  )\n}\n","import {PageProps} from 'gatsby'\n\nimport {ShopCategoryLayout, CategoryItem} from '../../layout/ShopCategoryLayout'\n\ntype CategoryPageProps = PageProps<\n  {},\n  {\n    category: {\n      title: string\n      items: Array<CategoryItem>\n    }\n    productGrid: {\n      titel?: string | undefined\n      items: Array<any>\n    }\n  }\n>\n\nconst CategoryPage = ({pageContext, path}: CategoryPageProps) => {\n  return (\n    <ShopCategoryLayout\n      title={pageContext.category.title}\n      path={path}\n      category={{\n        ...pageContext.category,\n        getPath: (title: string, handle: string, totalProducts: number) => {\n          const pathname = path.replace(/\\/$/, '')\n          const splitTitle = title.split(':')\n          const splitPath = pathname.split('/')\n\n          if (totalProducts === 0) {\n            return pathname\n          } else if (title === 'Alle Produkte') {\n            return `${pathname}/products/`\n          } else if (handle.startsWith('a-')) {\n            return `/${splitTitle[splitTitle.length - 1]\n              .toLowerCase()\n              .replaceAll(' ', '-')}/${splitPath[splitPath.length - 1]}`\n          } else {\n            return `${pathname}/${splitTitle[splitTitle.length - 1]\n              .toLowerCase()\n              .replaceAll(' ', '-')}`\n          }\n        }\n      }}\n      productGrid={{\n        ...pageContext.productGrid,\n        getPath: (handle: string) => {\n          return `/products/${handle}`\n        }\n      }}\n    />\n  )\n}\n\nexport default CategoryPage\n"],"names":["KEY","Symbol","for","hasWarned","getDisplayName","Comp","wrapper","name","displayName","concat","injectable","from","implementation","message","console","error","mq","map","bp","GCImage","props","gimg","className","imgClassName","alt","src","getWindowWidth","Math","max","document","documentElement","clientWidth","window","innerWidth","useWindowWidth","React","windowWidth","setWindowWidth","handleResize","addEventListener","removeEventListener","gridPadBoxes","items","gridSize","filler","Box","toFill","length","Array","fill","Banner","styled","BannerLayout","position","color","S","Flex","top","w","justifyContent","alignItems","path","Heading","size","my","title","ImageBoxWithTags","image","tags","borderRadius","boxShadow","bg","useColorModeValue","overflow","G","onDragStart","e","preventDefault","draggable","gatsbyImageData","left","right","p","tag","Badge","variant","fontSize","fontWeight","rounded","px","mr","hexColor","rgb","replace","match","x","parseInt","bgColor","textTransform","Price","price","parseFloat","toFixed","discountPrice","direction","wrap","base","md","Text","textDecoration","ml","mb","ProductCardLayout","id","categoriesString","createdAt","Date","getTime","now","push","percent","getDefaultTags","VStack","css","boxSize","cursor","textAlign","isTruncated","generateProductCard","item","tagsWithoutCategory","filter","startsWith","split","join","featuredImage","contextualPricing","maxVariantPricing","amount","compareAtPrice","CategoryGrid","emptyBoxes","SimpleGrid","spacing","minChildWidth","py","index","Link","as","GatsbyLink","to","getPath","handle","totalProducts","_hover","transform","AspectRatio","ratio","style","minHeight","minWidth","objectFit","objectPosition","ShopCategoryLayout","BaseLayout","withSearch","activePath","ShopLayout","align","category","borderBottom","productGrid","columns","key","pageContext","pathname","splitTitle","splitPath","toLowerCase","replaceAll"],"sourceRoot":""}